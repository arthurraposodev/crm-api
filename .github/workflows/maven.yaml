name: Build, Test, and Deploy to ECS

on:
#  pull_request:
#    branches:
#      - main
  push:
    branches:
      - main
    tags:
      - 'v*'
      - 'prod-v*'

jobs:
  build-check:
    name: Build Check and Run Tests on PR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean install --batch-mode --fail-at-end

      - name: Run Unit Tests
        run: mvn test --batch-mode

  build:
    name: Build and push Docker images
    runs-on: ubuntu-latest
    needs: build-check  # Ensures the PR check passes before proceeding with the build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install parent dependencies
        run: mvn clean install -N

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build and Push Docker image to ECR - Customer
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGION=us-east-1
          IMAGE_NAME=$ACCOUNT_ID.dkr.ecr.us-east-2.amazonaws.com/customer-service:latest
      
          cd customer
          mvn spring-boot:build-image -Dspring-boot.build-image.imageName=$IMAGE_NAME
          docker push $IMAGE_NAME

      - name: Build and Push Docker image to ECR - Gateway
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGION=us-east-1
          IMAGE_NAME=$ACCOUNT_ID.dkr.ecr.us-east-2.amazonaws.com/gateway-service:latest
          
          cd gateway
          mvn spring-boot:build-image -Dspring-boot.build-image.imageName=$IMAGE_NAME
          docker push $IMAGE_NAME

      - name: Build and Push Docker image to ECR - User
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGION=us-east-1
          IMAGE_NAME=$ACCOUNT_ID.dkr.ecr.us-east-2.amazonaws.com/user-service:latest
          
          cd user
          mvn spring-boot:build-image -Dspring-boot.build-image.imageName=$IMAGE_NAME
          docker push $IMAGE_NAME

  deploy-dev:
    name: Deploy to ECS dev cluster
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Deploy to ECS dev cluster - Gateway
        run: |
          CLUSTER_NAME=ecs-crm-dev-2
          SERVICE_NAME=gateway-service-2
          TASK_DEFINITION=gateway

          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment

#  promote-to-staging:
#    name: Promote to ECS staging cluster
#    runs-on: ubuntu-latest
#    needs: build
#    if: startsWith(github.ref, 'refs/tags/v')
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-2
#
#      - name: Deploy to ECS staging cluster
#        run: |
#          CLUSTER_NAME=your-staging-cluster
#          SERVICE_NAME=your-staging-service
#          TASK_DEFINITION=your-task-def
#
#          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment
#
#  promote-to-prod:
#    name: Promote to ECS prod cluster
#    runs-on: ubuntu-latest
#    needs: build
#    if: startsWith(github.ref, 'refs/tags/prod-v')
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-2
#
#      - name: Deploy to ECS prod cluster
#        run: |
#          CLUSTER_NAME=your-prod-cluster
#          SERVICE_NAME=your-prod-service
#          TASK_DEFINITION=your-task-def
#
#          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment