openapi: 3.0.1
info:
  title: User API
  description: API for managing user data in Cognito
  version: 1.0.0
servers:
  - url: http://localhost:8081
    description: Local server

paths:
  /v1/users:
    get:
      summary: List all users
      operationId: listUsers
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserQuery'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: User creation payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserCommand'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserQuery'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/users/{username}/admin:
    put:
      summary: Make a user an admin
      operationId: makeUserAdmin
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User granted admin status
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/users/{username}:
    delete:
      summary: Delete a user by username
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Invalid username format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a user's attributes
      operationId: updateUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: User update payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserCommand'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserQuery'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    CreateUserCommand:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        temporaryPassword:
          type: string
      required:
        - username
        - temporaryPassword

    UpdateUserCommand:
      type: object
      properties:
        email:
          type: string
        phoneNumber:
          type: string

    UserQuery:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        phoneNumber:
          type: string

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        errorCode:
          type: integer
        details:
          type: array
          items:
            type: string